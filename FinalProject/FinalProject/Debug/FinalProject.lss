
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  0000032e  000003c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800146  00800146  00000408  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f28  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b30  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000429  00000000  00000000  00001f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  0000233c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052e  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000210  00000000  00000000  000028e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002af2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ee e2       	ldi	r30, 0x2E	; 46
  e0:	f3 e0       	ldi	r31, 0x03	; 3
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a6 34       	cpi	r26, 0x46	; 70
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a6 e4       	ldi	r26, 0x46	; 70
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a8 35       	cpi	r26, 0x58	; 88
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
 102:	0c 94 95 01 	jmp	0x32a	; 0x32a <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <usart_init>:
char hour_display[4];
char min_display[4];
char sec_display[4];

void usart_init(){
	UCSR1A = 0x00;
 10a:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
	UCSR1B = 0x00 | (1<<RXEN) | (1<<TXEN); //enable the transmitter and receiver
 10e:	88 e1       	ldi	r24, 0x18	; 24
 110:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
	UCSR1C = 0x00 | (1<<UCSZ0) | (1<<UCSZ1); //8 bits data
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
	UBRR1 = ubrr;
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 122:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 126:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 12a:	08 95       	ret

0000012c <usart_txt>:
}

void usart_txt(char data){
	UDR1 = data;
 12c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
	while(~UCSR1A & (1<<TXC)); //wait until the data is transmitted
 130:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 134:	86 ff       	sbrs	r24, 6
 136:	fc cf       	rjmp	.-8      	; 0x130 <usart_txt+0x4>
	UCSR1A |= (1<<TXC);
 138:	e8 ec       	ldi	r30, 0xC8	; 200
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <usart_txtstr>:
}


void usart_txtstr(char *Str){
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	8c 01       	movw	r16, r24
	for(int i = 0; Str[i] != '\0'; i++){
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	03 c0       	rjmp	.+6      	; 0x15a <usart_txtstr+0x16>
		usart_txt(Str[i]);
 154:	0e 94 96 00 	call	0x12c	; 0x12c <usart_txt>
	UCSR1A |= (1<<TXC);
}


void usart_txtstr(char *Str){
	for(int i = 0; Str[i] != '\0'; i++){
 158:	21 96       	adiw	r28, 0x01	; 1
 15a:	f8 01       	movw	r30, r16
 15c:	ec 0f       	add	r30, r28
 15e:	fd 1f       	adc	r31, r29
 160:	80 81       	ld	r24, Z
 162:	81 11       	cpse	r24, r1
 164:	f7 cf       	rjmp	.-18     	; 0x154 <usart_txtstr+0x10>
		usart_txt(Str[i]);
	}
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	08 95       	ret

00000170 <display_time>:

void display_time(){
	usart_txtstr(hour_display);
 170:	84 e5       	ldi	r24, 0x54	; 84
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 a2 00 	call	0x144	; 0x144 <usart_txtstr>
	usart_txtstr(":");
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 a2 00 	call	0x144	; 0x144 <usart_txtstr>
	usart_txtstr(min_display);
 180:	8c e4       	ldi	r24, 0x4C	; 76
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 a2 00 	call	0x144	; 0x144 <usart_txtstr>
	usart_txtstr(":");
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 a2 00 	call	0x144	; 0x144 <usart_txtstr>
	usart_txtstr(sec_display);
 190:	80 e5       	ldi	r24, 0x50	; 80
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 a2 00 	call	0x144	; 0x144 <usart_txtstr>
	usart_txtstr("\n");
 198:	84 e0       	ldi	r24, 0x04	; 4
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 a2 00 	call	0x144	; 0x144 <usart_txtstr>
 1a0:	08 95       	ret

000001a2 <main>:
}


int main(void)
{
	DDRA = 0x00;
 1a2:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF;
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;
 1a8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF;
 1aa:	8b b9       	out	0x0b, r24	; 11
	int clk_value = 12;
	
	
	usart_init();
 1ac:	0e 94 85 00 	call	0x10a	; 0x10a <usart_init>
	usart_txtstr("Please input current time using Simon board switches (HH:MM:SS)");
 1b0:	86 e0       	ldi	r24, 0x06	; 6
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 a2 00 	call	0x144	; 0x144 <usart_txtstr>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1b8:	4a e0       	ldi	r20, 0x0A	; 10
 1ba:	64 e5       	ldi	r22, 0x54	; 84
 1bc:	71 e0       	ldi	r23, 0x01	; 1
 1be:	8c e0       	ldi	r24, 0x0C	; 12
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__itoa_ncheck>
 1c6:	4a e0       	ldi	r20, 0x0A	; 10
 1c8:	6c e4       	ldi	r22, 0x4C	; 76
 1ca:	71 e0       	ldi	r23, 0x01	; 1
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__itoa_ncheck>
 1d4:	4a e0       	ldi	r20, 0x0A	; 10
 1d6:	60 e5       	ldi	r22, 0x50	; 80
 1d8:	71 e0       	ldi	r23, 0x01	; 1
 1da:	8c e0       	ldi	r24, 0x0C	; 12
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__itoa_ncheck>
	itoa(clk_value, hour_display, 10);
	itoa(clk_value, min_display, 10);
	itoa(clk_value, sec_display, 10);
	display_time();
 1e2:	0e 94 b8 00 	call	0x170	; 0x170 <display_time>
	
    while (1) 
    {
		if(~PINA & (1<<PINA0)){
 1e6:	00 99       	sbic	0x00, 0	; 0
 1e8:	20 c0       	rjmp	.+64     	; 0x22a <main+0x88>
			while(~PINA & (1<<PINA0)); //while the switch is pushed wait
 1ea:	00 9b       	sbis	0x00, 0	; 0
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <main+0x48>
			hour++;
 1ee:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <hour>
 1f2:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <hour+0x1>
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <hour+0x1>
 1fc:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <hour>
			if (hour > 24){
 200:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <hour>
 204:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <hour+0x1>
 208:	49 97       	sbiw	r24, 0x19	; 25
 20a:	24 f0       	brlt	.+8      	; 0x214 <main+0x72>
				hour = 0;
 20c:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <hour+0x1>
 210:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <hour>
			}
			clk_value = hour;
 214:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <hour>
 218:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <hour+0x1>
 21c:	4a e0       	ldi	r20, 0x0A	; 10
 21e:	64 e5       	ldi	r22, 0x54	; 84
 220:	71 e0       	ldi	r23, 0x01	; 1
 222:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__itoa_ncheck>
			itoa(clk_value, hour_display, 10);
			display_time();
 226:	0e 94 b8 00 	call	0x170	; 0x170 <display_time>
			
		}
		
		if(~PINA & (1<<PINA1)){
 22a:	01 99       	sbic	0x00, 1	; 0
 22c:	20 c0       	rjmp	.+64     	; 0x26e <main+0xcc>
			while(~PINA & (1<<PINA3)); //while the switch is pushed wait
 22e:	03 9b       	sbis	0x00, 3	; 0
 230:	fe cf       	rjmp	.-4      	; 0x22e <main+0x8c>
			minutes++;
 232:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <minutes>
 236:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <minutes+0x1>
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <minutes+0x1>
 240:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <minutes>
			if (minutes > 60){
 244:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <minutes>
 248:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <minutes+0x1>
 24c:	cd 97       	sbiw	r24, 0x3d	; 61
 24e:	24 f0       	brlt	.+8      	; 0x258 <main+0xb6>
				minutes = 0;
 250:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <minutes+0x1>
 254:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <minutes>
			}
			clk_value = minutes;
 258:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <minutes>
 25c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <minutes+0x1>
 260:	4a e0       	ldi	r20, 0x0A	; 10
 262:	6c e4       	ldi	r22, 0x4C	; 76
 264:	71 e0       	ldi	r23, 0x01	; 1
 266:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__itoa_ncheck>
			itoa(clk_value, min_display, 10);
			display_time();
 26a:	0e 94 b8 00 	call	0x170	; 0x170 <display_time>
			
		}
		
		if(~PINA & (1<<PINA3)){
 26e:	03 99       	sbic	0x00, 3	; 0
 270:	20 c0       	rjmp	.+64     	; 0x2b2 <main+0x110>
			while(~PINA & (1<<PINA3)); //while the switch is pushed wait
 272:	03 9b       	sbis	0x00, 3	; 0
 274:	fe cf       	rjmp	.-4      	; 0x272 <main+0xd0>
			seconds++;
 276:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 27a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <__data_end+0x1>
 284:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
			if (seconds > 60){
 288:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 28c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
 290:	cd 97       	sbiw	r24, 0x3d	; 61
 292:	24 f0       	brlt	.+8      	; 0x29c <main+0xfa>
				seconds = 0;
 294:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__data_end+0x1>
 298:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__data_end>
			}
			clk_value = seconds;
 29c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 2a0:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
 2a4:	4a e0       	ldi	r20, 0x0A	; 10
 2a6:	60 e5       	ldi	r22, 0x50	; 80
 2a8:	71 e0       	ldi	r23, 0x01	; 1
 2aa:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__itoa_ncheck>
			itoa(clk_value, sec_display, 10);
			display_time();
 2ae:	0e 94 b8 00 	call	0x170	; 0x170 <display_time>
			
		}
		
		if(~PINA & (1<<PINA5)){
 2b2:	05 99       	sbic	0x00, 5	; 0
 2b4:	98 cf       	rjmp	.-208    	; 0x1e6 <main+0x44>
			while(~PINA & (1<<PINA5)); //while the switch is pushed wait
 2b6:	05 9b       	sbis	0x00, 5	; 0
 2b8:	fe cf       	rjmp	.-4      	; 0x2b6 <main+0x114>
			display_time();
 2ba:	0e 94 b8 00 	call	0x170	; 0x170 <display_time>
 2be:	93 cf       	rjmp	.-218    	; 0x1e6 <main+0x44>

000002c0 <__itoa_ncheck>:
 2c0:	bb 27       	eor	r27, r27
 2c2:	4a 30       	cpi	r20, 0x0A	; 10
 2c4:	31 f4       	brne	.+12     	; 0x2d2 <__itoa_ncheck+0x12>
 2c6:	99 23       	and	r25, r25
 2c8:	22 f4       	brpl	.+8      	; 0x2d2 <__itoa_ncheck+0x12>
 2ca:	bd e2       	ldi	r27, 0x2D	; 45
 2cc:	90 95       	com	r25
 2ce:	81 95       	neg	r24
 2d0:	9f 4f       	sbci	r25, 0xFF	; 255
 2d2:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__utoa_common>

000002d6 <__utoa_ncheck>:
 2d6:	bb 27       	eor	r27, r27

000002d8 <__utoa_common>:
 2d8:	fb 01       	movw	r30, r22
 2da:	55 27       	eor	r21, r21
 2dc:	aa 27       	eor	r26, r26
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	aa 1f       	adc	r26, r26
 2e4:	a4 17       	cp	r26, r20
 2e6:	10 f0       	brcs	.+4      	; 0x2ec <__utoa_common+0x14>
 2e8:	a4 1b       	sub	r26, r20
 2ea:	83 95       	inc	r24
 2ec:	50 51       	subi	r21, 0x10	; 16
 2ee:	b9 f7       	brne	.-18     	; 0x2de <__utoa_common+0x6>
 2f0:	a0 5d       	subi	r26, 0xD0	; 208
 2f2:	aa 33       	cpi	r26, 0x3A	; 58
 2f4:	08 f0       	brcs	.+2      	; 0x2f8 <__utoa_common+0x20>
 2f6:	a9 5d       	subi	r26, 0xD9	; 217
 2f8:	a1 93       	st	Z+, r26
 2fa:	00 97       	sbiw	r24, 0x00	; 0
 2fc:	79 f7       	brne	.-34     	; 0x2dc <__utoa_common+0x4>
 2fe:	b1 11       	cpse	r27, r1
 300:	b1 93       	st	Z+, r27
 302:	11 92       	st	Z+, r1
 304:	cb 01       	movw	r24, r22
 306:	0c 94 85 01 	jmp	0x30a	; 0x30a <strrev>

0000030a <strrev>:
 30a:	dc 01       	movw	r26, r24
 30c:	fc 01       	movw	r30, r24
 30e:	67 2f       	mov	r22, r23
 310:	71 91       	ld	r23, Z+
 312:	77 23       	and	r23, r23
 314:	e1 f7       	brne	.-8      	; 0x30e <strrev+0x4>
 316:	32 97       	sbiw	r30, 0x02	; 2
 318:	04 c0       	rjmp	.+8      	; 0x322 <strrev+0x18>
 31a:	7c 91       	ld	r23, X
 31c:	6d 93       	st	X+, r22
 31e:	70 83       	st	Z, r23
 320:	62 91       	ld	r22, -Z
 322:	ae 17       	cp	r26, r30
 324:	bf 07       	cpc	r27, r31
 326:	c8 f3       	brcs	.-14     	; 0x31a <strrev+0x10>
 328:	08 95       	ret

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
